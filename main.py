import telebot
from telebot import types

TOKEN = '7897519628:AAF2TYve-PKYvb0A8kENfyCxY09eO9c_vCM'
bot = telebot.TeleBot(TOKEN)

# Розклад тренувань і раціону на тиждень
schedule = {
    "Понеділок": {
        "Тренування 07:00": [
            "Біг: 30 хвилин",
            "Присідання: 4 підходи по 15 повторів",
            "Відтискання: 4 підходи по 12 повторів",
            "Підйоми гирі: 4 підходи по 15 повторів",
            "Планка: 3 підходи по 30 секунд"
        ],
        "Раціон": {
            "Сніданок": "08:45 - Омлет з 2 яєць з помідорами і шпинатом, 1 шматок цільнозернового хліба, 1 яблуко.",
            "Обід": "13:00 - Куряча грудка (200 г) з рисом (100 г) і свіжим огірком, салат з капусти, 1 банан.",
            "Вечеря": "19:00 - Тунець (150 г) з картоплею (150 г) і свіжими овочами (помідори, огірки)."
        }
    },
    "Вівторок": {
        "Тренування 07:00": [
            "Скакалка: 20 хвилин",
            "Присідання: 4 підходи по 15 повторів",
            "Відтискання: 4 підходи по 12 повторів",
            "Підйоми гирі: 4 підходи по 15 повторів",
            "Планка: 3 підходи по 30 секунд"
        ],
        "Раціон": {
            "Сніданок": "08:45 - Вівсянка на воді або молоці (50 г) з яблуком, 1 ч.л. меду.",
            "Обід": "13:00 - Індика (200 г) з гречкою (100 г) і свіжими овочами (редиска, перець), 1 груша.",
            "Вечеря": "19:00 - Куряча грудка (150 г) з картоплею (150 г) і зеленим салатом."
        }
    },
    "Середа": {
        "Тренування 07:00": [
            "Біг: 30 хвилин",
            "Присідання: 4 підходи по 15 повторів",
            "Відтискання: 4 підходи по 12 повторів",
            "Підйоми гирі: 4 підходи по 15 повторів",
            "Планка: 3 підходи по 30 секунд"
        ],
        "Раціон": {
            "Сніданок": "08:45 - Гречка (50 г) з 1 яйцем, 1 апельсин, зелений чай.",
            "Обід": "13:00 - Риба (200 г) з картоплею (150 г) та свіжими овочами (огірки, помідори).",
            "Вечеря": "19:00 - Творог (200 г) з ягодами."
        }
    },
    "Четвер": {
        "Тренування 07:00": [
            "Скакалка: 20 хвилин",
            "Присідання: 4 підходи по 15 повторів",
            "Відтискання: 4 підходи по 12 повторів",
            "Підйоми гирі: 4 підходи по 15 повторів",
            "Планка: 3 підходи по 30 секунд"
        ],
        "Раціон": {
            "Сніданок": "08:45 - 2 варені яйця, 1 шматок цільнозернового хліба, 1 банан, зелений чай.",
            "Обід": "13:00 - Курячі стегна (200 г) з рисом (100 г) і свіжими овочами (морква, перець), 1 груша.",
            "Вечеря": "19:00 - Тунець (150 г) з картоплею (150 г) і салатом з помідорів."
        }
    },
    "П'ятниця": {
        "Тренування 07:00": [
            "Біг: 30 хвилин",
            "Присідання: 4 підходи по 15 повторів",
            "Відтискання: 4 підходи по 12 повторів",
            "Підйоми гирі: 4 підходи по 15 повторів",
            "Планка: 3 підходи по 30 секунд"
        ],
        "Раціон": {
            "Сніданок": "08:45 - Вівсянка (50 г) з бананом і 1 ч.л. меду.",
            "Обід": "13:00 - Фарширована курка (200 г) з гречкою (100 г) і свіжими овочами (огірки, редиска), 1 яблуко.",
            "Вечеря": "19:00 - Лосось (150 г) з картоплею (150 г) і зеленою цибулею."
        }
    },
    "Субота": {
        "Тренування 07:00": [
            "Скакалка: 20 хвилин",
            "Присідання: 4 підходи по 15 повторів",
            "Відтискання: 4 підходи по 12 повторів",
            "Підйоми гирі: 4 підходи по 15 повторів",
            "Планка: 3 підходи по 30 секунд"
        ],
        "Раціон": {
            "Сніданок": "08:45 - Омлет з 2 яєць з помідорами і перцем, 1 шматок цільнозернового хліба, 1 апельсин.",
            "Обід": "13:00 - Яловичина (200 г) з рисом (100 г) і салатом з капусти, 1 груша.",
            "Вечеря": "19:00 - Риба (150 г) з картоплею (150 г) і свіжими овочами (помідори, огірки)."
        }
    },
    "Неділя": {
        "Тренування 07:00": "Вихідний",
        "Раціон": {
            "Сніданок": "08:45 - Гречка (50 г) з 1 яйцем, 1 яблуко, зелений чай.",
            "Обід": "13:00 - Куряча грудка (200 г) з гречкою (100 г) і свіжими овочами (морква, редиска), 1 банан.",
            "Вечеря": "19:00 - Творог (200 г) з фруктами (персики або ягоди)."
        }
    }
}

user_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    user_data[message.chat.id] = None  # Скидаємо вибір дня
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    days = ["Понеділок", "Вівторок", "Середа", "Четвер", "П'ятниця", "Субота", "Неділя"]
    for day in days:
        markup.add(day)
    markup.add("Назад")  # Додано кнопку "Назад"
    bot.send_message(message.chat.id, "Виберіть день тижня:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in schedule.keys())
def send_options(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("Тренування", "Раціон", "Назад")  # Додано "Назад"
    bot.send_message(message.chat.id, f"Ви вибрали {message.text}. Що ви хочете переглянути?", reply_markup=markup)
    user_data[message.chat.id] = message.text

@bot.message_handler(func=lambda message: message.text in ["Тренування", "Раціон"])
def send_schedule(message):
    day = user_data.get(message.chat.id)  # Отримати вибраний день
    if not day:
        bot.send_message(message.chat.id, "Виберіть день тижня спочатку.")
        return

    if message.text == "Тренування":
        response = "Тренування:\n" + "\n".join(schedule[day]["Тренування"])
    elif message.text == "Раціон":
        response = "Раціон:\n"
        for meal, info in schedule[day]["Раціон"].items():
            response += f"{meal}: {info}\n"

    # Відправка розкладу
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: message.text == "Назад")
def go_back(message):
    start(message)  # Виклик функції start для повернення до вибору дня

if __name__ == "__main__":
    bot.polling(none_stop=True)
